Examination of File# 1367 (Script loaded at the start of the game during Hiro/Ruby sequence)

Action Script loaded at 2E1000
==============================

Header:
2E1000 0000C23C 00000002 00000018 0000497C
2E1010 0000197C 00007D64 00000005 00000010
2E1020 0000000A 00000108 00000100 00200020
2E1030 8600FFFF FFFFFFFF FFFFFFFF FFFFFFFF
2E1040 FFFFFFFF FFFFFFFF

LW	Value		Descr
==================================
0	0000C23C	ZeroPad Relative Offset
1	00000002	Partial offset: Multiply by 4 and double -> 2*4 = 0x8 + 0x8 = 0x10
2	00000018 	Partial offset: Add previous value to this value (2E1000+*2E1008 + 0x10 = 0x2E1000+0x18+0x10 = 0x2E1028)
                    This gives some sort of a max address location to check against.  The LW that preceeds it at 2E1024 is required
		     Also used to get address 0x2E1018, used later
3	0000497C	ES Script File Relative Offset
4	0000197C 	Relative offset for something? (Follows action scripts, Precedes ES File)  = 0x2E1000+197C = 0x2E297C
5	00007D64        Relative offset to section that follows ES Script.  Needs to be 32-byte aligned.
6	00000005    This is *2E1018.  Begin check against 0xA
7	00000010    
8	0000000A    check against 0xA (TRUE).  This is saved off as a global
9	00000108    (0x2E1018+00000108) =	0x2E1120.  0x108 came from the offset 0x2E1024 mentioned earlier.
                                                           This is a magic file offset.  The data structure here ends in at least 0xFFFFFFFFF
                                                           Following this data structure is the 24 LW of relative action script offsets.
A	00000100    ???
B	00200020    ???
C 	8600FFFF    ???
D 	FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF


Take offset 18+0 and put data in r3 == 0x0005 (compare with r4, with is 5 and branch true)
r2 = *2e101c = 0x0010
r7 = 0x0010+201018 = 2e1028
read 2e1029
read 2e102a
read from 2e1048
...

Some sort of data section starts at 0x2E1120.
0x2E1120 = 0x00 (read)
0x2E1121 = 0x01 (read)
     0605C4A0  jsr 0605C684 (2E1128 (Derived From earlier), 0xA  (Derived From earlier))
[I believe this is a fixed data structure]
...
0x2E113C = 0xFFFFFFFF  <-- end of section



0x2E1140 to 2E11A0 contain 24 longwords of relative action script offsets.
Add 2*LW_Value to the base offset of 0x2E1140 to get to the start of a particular script.
If a value of 0x00000000 exists then ????
Do we know why there are 24 entries -->  Seems to be a fixed # of 4 + 4 + 18 .... actually it can vary somehow
*** The offsets here will change if we increase the length of these scripts ***

0605C716:  	read 0x2E1140 = 0x00000030
                    0x30+0x30 = 0x60
                    2E1140+60 = 0x2E11A0   <-- start of first action script
                read 0x2E1144 = 0x0000009A
                    0x9A+0x9A = 0x134
                    2E1140+134 = 0x2E1274  <-- start of second action script
                Read 0x2E1148 = 0101
                    0x101+0x101 = 0x0202
                    2E1140+0202 = 0x2E1342  <-- start of third action script

2E11A0 - First Action Script, which terminates in 0xFFFF
Last script ends at offset 0x2E2978 with 0xFFFF0000  (00 is probably just because we need to end on a 32-bit boundary)

0x2E297C holds the next section of data as noted in the top level header